#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using WebExtras.Core;
    using WebExtras.Mvc.Core;
    using WebExtras.Mvc.Html;
    using WebExtras.Mvc.JQueryUI;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Areas/JQueryUI/Views/Mvc/CoreHtml.cshtml")]
    public partial class _Areas_JQueryUI_Views_Mvc_CoreHtml_cshtml : System.Web.Mvc.WebViewPage<WebExtras.DemoApp.Models.Mvc.CoreHtmlViewModel>
    {
        public _Areas_JQueryUI_Views_Mvc_CoreHtml_cshtml()
        {
        }
        public override void Execute()
        {

WriteLiteral("\r\n");


            
            #line 3 "..\..\Areas\JQueryUI\Views\Mvc\CoreHtml.cshtml"
  
  ViewBag.Title = "Mvc Html Helper Extensions";


            
            #line default
            #line hidden
WriteLiteral(@"
<h3 class=""keep-center"">Mvc Html Helper Extensions</h3>

<div class=""col-group"">
  <div class=""col-6"">
    <div class=""col-12"">
      <div class=""col-3"">
        <strong>Assembly</strong>
      </div>
      <div class=""col-4"">
        WebExtras.Mvc.dll
      </div>
    </div>
    <div class=""col-12"">
      <div class=""col-3"">
        <strong>Namespace</strong>
      </div>
      <div class=""col-4"">
        WebExtras.Mvc.Core
      </div>
    </div>
  </div>  
</div>

<div class=""ui-well"">
  <h4>Hyperlinks</h4>
  <p>Markup</p>
  <pre><code>
  ");


WriteLiteral("@Html.Hyperlink(\"Take me to google\", \"http://www.google.com\")\r\n  </code></pre>\r\n " +
" <p>Output</p>\r\n  <div class=\"content\">\r\n    ");


            
            #line 38 "..\..\Areas\JQueryUI\Views\Mvc\CoreHtml.cshtml"
Write(Html.Hyperlink("Take me to google", "http://www.google.com"));

            
            #line default
            #line hidden
WriteLiteral("\r\n  </div>\r\n  <p>All available extensions</p>\r\n  <pre><code>\r\n  ");


WriteLiteral("@Html.Hyperlink(linkText, url, htmlAttributes)\r\n  ");


WriteLiteral("@Html.Hyperlink(linkText, actionresult, htmlAttributes)    \r\n  </code></pre>\r\n</d" +
"iv>\r\n\r\n<div class=\"ui-well\">\r\n  <h4>Images</h4>\r\n  <p>Markup</p>\r\n  <pre><code>\r" +
"\n  ");


WriteLiteral("@Html.Image(\"/Content/png/youtube-logo.png\", \"YouTube\", \"Take me to YouTube\")\r\n  " +
"</code></pre>\r\n  <p>Output</p>\r\n  <div class=\"content\">\r\n    ");


            
            #line 55 "..\..\Areas\JQueryUI\Views\Mvc\CoreHtml.cshtml"
Write(Html.Image(Links.Content.png.youtube_logo_png, "YouTube", "Take me to YouTube"));

            
            #line default
            #line hidden
WriteLiteral("\r\n  </div>\r\n  <p>All available extensions</p>\r\n  <pre><code>\r\n  ");


WriteLiteral("@Html.Image(src, htmlAttributes)\r\n  ");


WriteLiteral("@Html.Image(src, altText, htmlAttributes)\r\n  ");


WriteLiteral("@Html.Image(src, altText, title, htmlAttributes)\r\n  </code></pre>\r\n</div>\r\n\r\n\r\n<d" +
"iv class=\"ui-well\">\r\n  <h4>Imagelinks</h4>\r\n  <p>An image link is basically an i" +
"mage embedded into a hyperlink</p>\r\n  <p>Markup</p>\r\n  <pre><code>\r\n  ");


WriteLiteral("@Html.Imagelink(\"/Content/png/youtube-logo.png\", \"YouTube\", \"Take me to YouTube\"," +
" \"http://www.youtube.com\")\r\n  </code></pre>\r\n  <p>Output</p>\r\n  <div class=\"cont" +
"ent\">\r\n    ");


            
            #line 75 "..\..\Areas\JQueryUI\Views\Mvc\CoreHtml.cshtml"
Write(Html.Imagelink(Links.Content.png.youtube_logo_png, "YouTube", "Take me to YouTube", "http://www.youtube.com"));

            
            #line default
            #line hidden
WriteLiteral("\r\n  </div>\r\n  <p>All available extensions</p>\r\n  <pre><code>\r\n  ");


WriteLiteral("@Html.Imagelink(src, url, htmlAttributes)\r\n  ");


WriteLiteral("@Html.Imagelink(src, altText, url, htmlAttributes)\r\n  ");


WriteLiteral("@Html.Imagelink(src, altText, title, url, htmlAttributes)\r\n  ");


WriteLiteral("@Html.Imagelink(src, actionresult, htmlAttributes)\r\n  ");


WriteLiteral("@Html.Imagelink(src, altText, actionresult, htmlAttributes)\r\n  ");


WriteLiteral(@"@Html.Imagelink(src, altText, title, actionresult, htmlAttributes)
  </code></pre>
  <p>Notes</p>
  <div class=""content"">
    By default any extra HTML attributes specified by the <strong>htmlAttributes</strong> parameter will get applied to the A tag i.e the link. If you would like
    to add HTML attributes to the IMG tag you must specify the <strong>htmlAttributes</strong> parameter in the following format:    
  </div>
  <pre><code>
  <span class=""comment"">// Any attributes specified with property name 'a' will be applied to the link</span>
  <span class=""comment"">// and those specified with property name 'img' will be applied to the image</span>
  new { a = new { attr1 = value1 ... }, img = new { attr1 = value1 } }
  </code></pre>
</div>

<div class=""ui-well"">
  <h4>Lists</h4>
  <p>Markup</p>
  <pre><code>
  ");


WriteLiteral(@"@Html.List(EList.Unordered, new HtmlListItem[] {        <span class=""comment"">// You can create an ordered list by changing the list type</span>
    new HtmlListItem(""list item 1""),
    new HtmlListItem(""list item 2""),
    new HtmlListItem(""list item 3""),
    new HtmlListItem(""list item 4""),
    new HtmlListItem(""list item 5"")
  })
  </code></pre>
  <p>Output</p>
  <div class=""content"">
    ");


            
            #line 112 "..\..\Areas\JQueryUI\Views\Mvc\CoreHtml.cshtml"
Write(Html.List(EList.Unordered, new HtmlListItem[] { 
      new HtmlListItem("list item 1"),
      new HtmlListItem("list item 2"),
      new HtmlListItem("list item 3"),
      new HtmlListItem("list item 4"),
      new HtmlListItem("list item 5")}));

            
            #line default
            #line hidden
WriteLiteral(@"
  </div>
</div>

<div class=""ui-well"">
  <h4>Authenticated extension methods</h4>
  <p>
    These extension methods only return HTML content based on whether the user is authenticated or not. It uses the <strong>System.Security.Principal.IPrincipal.Identity.IsAuthenticated</strong> flag
  in order to decide whether a user is authenticated or not.
  </p>
  <p>Usage</p>
  <pre><code>
  ");


WriteLiteral("@Html.AuthHyperlink(...)         <span class=\"comment\">// Provides all the same o" +
"verloads as the ");


WriteLiteral("@Html.Hyperlink(...) extension</span>\r\n  ");


WriteLiteral("@Html.AuthImagelink(...)         <span class=\"comment\">// Provides all the same o" +
"verloads as the ");


WriteLiteral(@"@Html.Imagelink(...) extension</span>
  </code></pre>
</div>

<div class=""ui-well"">
  <h4>Validation extension method</h4>
  <p>This extension method allows you to check whether a particular view model property value has any model state errors. This method looks at the model state dictionary
    and checks whether the given view model property exists and has an error.
  </p>
  <p>Usage</p>
  <pre><code>
  ");


WriteLiteral("@Html.IsValidFor(f => f.PropertyName)\r\n  ");


WriteLiteral("@Html.IsValidFor(PropertyName)\r\n  </code></pre>\r\n</div>\r\n\r\n<div class=\"ui-well\">\r" +
"\n  <h4>View renderer extension methods</h4>\r\n  <p>These methods allow you to get" +
" the rendered content of a view in the controller. It is particularly useful if " +
"you want to return a view as a JSON callback.</p>\r\n  <p>Usage/Markup</p>\r\n  <pre" +
"><code>\r\n  <span class=\"comment\">// The following controller action demonstrates" +
" how you would use these extension methods</span>\r\n  using WebExtras.Mvc.Core\r\n\r" +
"\n  public class HomeController : ControllerBase\r\n  {\r\n    public JsonResult GetJ" +
"sonView()\r\n    {\r\n      string content = string.Empty;\r\n      SomeViewModel myMo" +
"del = new SomeViewModel();\r\n      if(Request.IsAjaxRequest)\r\n        content = <" +
"span class=\"hightlight\">this.</span>GetRenderedPartialView(\"mypartialviewname\", " +
"myModel);\r\n      else\r\n        content = <span class=\"hightlight\">this.</span>Ge" +
"tRenderedView(\"myfullviewname\", \"mymasterpagename\", myModel);\r\n\r\n      return Js" +
"on(content, JsonRequestBehavior.AllowGet);\r\n    }\r\n  }\r\n  </code></pre>\r\n  <p>Al" +
"l available extension methods</p>\r\n  <pre><code>\r\n  GetRenderedView(viewName, mo" +
"del);\r\n  GetRenderedView(viewName, masterPageName, model);\r\n  GetRenderedPartial" +
"View(partialViewName, model);\r\n  </code></pre>\r\n</div>\r\n\r\n<div class=\"ui-well\">\r" +
"\n  <h4>Rendering static HTML inline</h4>\r\n  <p>WebExtras provides an extension m" +
"ethod to render static HTML content inline. This is especially useful when doing" +
" content management external to the system,\r\n    for e.g. system changelogs, kno" +
"wn issues list etc.\r\n  </p>\r\n  <p>Usage</p>\r\n  <pre><code>\r\n  ");


WriteLiteral("@Html.Inline(\"relative path to the static content file\")\r\n  </code></pre>\r\n</div>" +
"\r\n\r\n<div class=\"ui-well\">\r\n  <h4>Label with required field asterix</h4>\r\n  <p>Ma" +
"rkup</p>\r\n  <pre><code>\r\n");


WriteLiteral("@Html.RequiredFieldLabelFor(f => f.SomeProperty)\r\n");


WriteLiteral("@Html.RequiredFieldLabelFor(f => f.SomeProperty, \"My random label\")\r\n  </code></p" +
"re>\r\n  <p>Output</p>\r\n  <div class=\"content\">\r\n    <div class=\"col-group\">\r\n    " +
"  <div class=\"col-2\">\r\n        ");


            
            #line 199 "..\..\Areas\JQueryUI\Views\Mvc\CoreHtml.cshtml"
   Write(Html.RequiredFieldLabelFor(f => f.SomeProperty));

            
            #line default
            #line hidden
WriteLiteral("\r\n      </div>\r\n      <div class=\"col-2\">\r\n        ");


            
            #line 202 "..\..\Areas\JQueryUI\Views\Mvc\CoreHtml.cshtml"
   Write(Html.RequiredFieldLabelFor(f => f.SomeProperty, "My random label"));

            
            #line default
            #line hidden
WriteLiteral(@"
      </div>
    </div>
  </div>
  <p>All available extensions</p>
  <pre><code>
<span class=""comment"">// The displaying of the asterix is decided by inspecting the <br />// System.ComponentModel.RequiredAttribute added to the view model property</span>
");


WriteLiteral("@Html.RequiredFieldLabelFor(propertySelector)\r\n");


WriteLiteral("@Html.RequiredFieldLabelFor(propertySelector, htmlAttributes)\r\n");


WriteLiteral("@Html.RequiredFieldLabelFor(propertySelector, labelText)\r\n");


WriteLiteral("@Html.RequiredFieldLabelFor(propertySelector, labelText, htmlAttributes)\r\n  </cod" +
"e></pre>\r\n</div>");


        }
    }
}
#pragma warning restore 1591
