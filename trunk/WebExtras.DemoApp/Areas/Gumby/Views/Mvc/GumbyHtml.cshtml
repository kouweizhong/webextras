@model WebExtras.DemoApp.Models.Mvc.CoreHtmlViewModel
@{
  ViewBag.Title = "Mvc Gumby Html Helper Extensions";
}

@if (Model.ShowMessage)
{
  @Html.GetLastActionMessage()
}

<h3 class="keep-center">Mvc Gumby Html Helper Extensions</h3>

<div class="row">
  <div class="six columns">
    <div class="row">
      <div class="three columns">
        <strong>Assembly</strong>
      </div>
      <div class="four columns">
        WebExtras.Mvc.dll
      </div>
    </div>
    <div class="row">
      <div class="three columns">
        <strong>Namespace</strong>
      </div>
      <div class="four columns">
        WebExtras.Mvc.Gumby
      </div>
    </div>
  </div>
  <div class="six columns">
    <div class="three columns">
      <strong>Dependancies</strong>
    </div>
    <div class="six columns">
      <ul class="dependancies">
        <li>Gumby 2.5.x</li>
        <li>webextras.gumby.css</li>
      </ul>
    </div>
  </div>
</div>

<div class="well">
  <h4>Icon</h4>
  <p>
    Markup
  </p>
  <pre><code>
  @@Html.Icon(EGumbyIcon.Chart_Pie)
  </code></pre>
  <p>
    Output
  </p>
  <div class="content">
    @Html.Icon(EGumbyIcon.Chart_Pie)
  </div>
</div>

<div class="well">
  <h4>Adding icons to existing elements</h4>
  <p>
    Markup
  </p>
  <pre><code>
  @@Html.Hyperlink("Take me to google", "http://www.google.com").AddIcon(EGumbyIcon.Check)
  </code></pre>
  <p>
    Output
  </p>
  <div class="content">
    @Html.Hyperlink("Take me to google", "http://www.google.com").AddIcon(EGumbyIcon.Check)
  </div>
  <p>
    All available extensions
  </p>
  <pre><code>
  .AddIcon(gumby-icon)                
  .AddIcon(gumby-icon, icon-on-left-flag)
  </code></pre>
</div>

<div class="well">
  <h4>Button styled hyperlinks</h4>
  <p>
    Markup
  </p>
  <pre><code>
  @@Html.Hyperlink("Take me to google", "http://www.google.com")
    .AddIcon(EGumbyIcon.Check)
    .AsButton(EGumbyButton.Info) 
  </code></pre>
  <p>
    Output
  </p>
  <div class="content">
    @Html.Hyperlink("Take me to google", "http://www.google.com").AddIcon(EGumbyIcon.Check).AsButton(EGumbyButton.Info, EGumbyButtonStyle.Medium)
  </div>
  <p>
    All available extensions
  </p>
  <pre><code>
  <span class="comment">// Note that this extension can only be used for hyperlinks and button elements</span> 
  .AsButton(type)
  .AsButton(type, size/style)
  </code></pre>
</div>

<div class="well">
  <h4>Navbar</h4>
  <p>Markup</p>
  <pre><code>
  @@{
      <span class="comment">// You can use Hyperlink elements or a HtmlList element to render a navbar</span>
      Hyperlink logo = new Hyperlink("Metro Logo", "/").AddCssClass("two columns logo");
      Hyperlink link = new Hyperlink("Link", "#");
      IExtendedHtmlString list = new HtmlList(EList.Unordered, new HtmlListItem[]
      {
        HtmlListItem.From(link),
        HtmlListItem.From(link),
        HtmlListItem.From(link),
        HtmlListItem.From(link),
        HtmlListItem.From(link),
        HtmlListItem.From(link),
        HtmlListItem.From(link),
      }).AddCssClass("ten columns");
    }
  @@Html.Navbar(logo, list)
  </code></pre>
  <p>
    Output
  </p>
  <div class="content row">
    <div class="ten columns">
      @{
        Hyperlink logo1 = new Hyperlink("Metro Logo", "/", new { @class = "two columns logo" });
        Hyperlink logo2 = new Hyperlink("Pretty Logo", "/", new { @class = "two columns logo" });
        
        Hyperlink link = new Hyperlink("Link", "#");
        
        IExtendedHtmlString list = new HtmlList(EList.Unordered, new HtmlListItem[]
        {
          HtmlListItem.From(link),
          HtmlListItem.From(link),
          HtmlListItem.From(link),
          HtmlListItem.From(link),
          HtmlListItem.From(link),
          HtmlListItem.From(link),
          HtmlListItem.From(link)
        }).AddCssClass("ten columns");
      }

      @Html.Navbar(logo1, list)
      
      @Html.Navbar(logo2, list).AsPretty()
    </div>
  </div>
  <p>
    All available extensions
  </p>
  <pre><code>
  .AsMetro()
  .AsPretty()
  .FixAt(location)
  .FixAt(location, offset)
  .PinAt(location)
  .PinAt(location, offset)
  </code></pre>
</div>

<div class="well">
  <h4>Tooltips</h4>
  <p>Markup</p>
  <pre><code>
  @@Html.TooltipFor(f => f.SomeProperty, "This is a tooltip")
  @@Html.TooltipFor(f => f.SomeProperty2)
  </code></pre>
  <p>Output</p>
  <div class="content">
    <div class="row">
      <div class="three columns">First call result @Html.Icon(EGumbyIcon.Right_Open_Big) @Html.TooltipFor(f => f.SomeProperty, "This is a tooltip")</div>
      <div class="three columns">Second call result @Html.Icon(EGumbyIcon.Right_Open_Big) @Html.TooltipFor(f => f.SomeProperty2)</div>
    </div>
  </div>
  <p>All available extensions</p>
  <pre><code>
  <span class="comment">// Tooltip text retrieved from the <span class="highlight">System.ComponentModel.DescriptionAttribute</span> added to the view model property</span>
  @@Html.TooltipFor(propertySelector)

  <span class="comment">// Tooltip text retrieved from the function parameter passed in</span>
  @@Html.TooltipFor(propertySelector, tooltipText)
  </code></pre>
</div>

<div class="well">
  <h4>Action messages</h4>
  <p>
    WebExtras provides a way to add action messages to denote status of action to notify a user. For e.g. you may want to add a message to the user when he is moved to a different
    page on a form submit or on a particular action
  </p>
  <p>Usage</p>
  <pre><code>
  <span class="comment">// In the controller</span>
  using WebExtras.MVC.Bootstrap.Core

  public class HomeController : ControllerBase
  {
    public ActionResult SomeAction()
    {
      SomeModel model = new SomeModel();
      return <span class="highlight">this.</span>View("myview", model, "Your action was successful");
    }

    public ActionResult SomeOtherAction()
    {
      SomeModel model = new SomeModel();
      return <span class="highlight">this.</span>RedirectToAction(myActionResult, "Your action failed", EActionMessage.Error);
    }
  }

  <span class="comment">// In the view</span>
  @@Html.GetLastActionMessage()
  </code></pre>
  <p>Output</p>
  <div class="content">
    <span class="comment">// Click the link below to see an action message demo.
      <br />
    </span>
    <span class="comment">// Action messages by default appear on the top right corner of the screen.
      <br />
    </span>
    <span class="comment">// It's position can be controlled via CSS though. See the accompanying webextras.css file.
      <br />
    </span>
    <br />
    @Html.Hyperlink("Action Successful Message Demo", MVC.Gumby.Mvc.ActionMessageDemo(true))
    &nbsp;&nbsp;&nbsp;&nbsp;
    @Html.Hyperlink("Action Error Message Demo", MVC.Gumby.Mvc.ActionMessageDemo(false))
  </div>
</div>
