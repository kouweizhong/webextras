@model WebExtras.DemoApp.Models.Mvc.CoreFormViewModel

@using WebExtras.Mvc.Bootstrap.DateTimePicker

@{
  ViewBag.Title = "Mvc Bootstrap 3 Form Helper Extensions";
}

<h3 class="keep-center">Mvc Bootstrap 3 Form Helper Extensions</h3>

<div class="row">
  <div class="col-md-6">
    <div class="row">
      <div class="col-md-3">
        <strong>Assembly</strong>
      </div>
      <div class="col-md-4">
        WebExtras.Mvc.dll
      </div>
    </div>
    <div class="row">
      <div class="col-md-3">
        <strong>Namespace</strong>
      </div>
      <div class="col-md-4">
        WebExtras.Mvc.Bootstrap
      </div>
    </div>
  </div>
  <div class="col-md-6">
    <div class="col-md-3">
      <strong>Dependancies</strong>
    </div>
    <div class="col-md-7">
      <ul class="dependancies">
        <li>Bootstrap 3.x</li>
        <li>Font Awesome 3.11 and below</li>
        <li>@Html.Hyperlink("Bootstrap Datetime picker", "http://www.malot.fr/bootstrap-datetimepicker")</li>
        <li>webextras.bootstrap3.css</li>
      </ul>
    </div>
  </div>
</div>

<div class="well">
  <h4>Creating special buttons</h4>
  <p>Special buttons can be created by decorating hyperlinks and basic buttons with the appropriate special button type</p>

  <p>Markup</p>
  <pre><code>
@@Html.Hyperlink("Take me to google", "http://www.google.com")
    .AsButton(EBootstrapButton.Default)

@@Html.Button(EButton.Regular, "Take me to google", "window.location='http://www.google.com.au'")
    .AsButton(EBootstrapButton.Danger, EBootstrapButton.Large)
  </code></pre>
  @{
    const string msg = "You can create a button of type <strong>EButton.Cancel</strong> which takes you back to the previous page. When a button of this" +
                       "type is created, any onclick event specified will be blatantly ignored.";
  }
  @Html.Alert(EMessage.Warning, msg, string.Empty, EFontAwesomeIcon.Flag)
  <p>Output</p>
  <div class="content">
    <p>
      @Html.Hyperlink("Take me to google", "http://www.google.com").AsButton(EBootstrapButton.Default)
      @Html.Hyperlink("Take me to google", "http://www.google.com").AsButton(EBootstrapButton.Primary)
      @Html.Button(EButton.Cancel, "Take me back").AsButton(EBootstrapButton.Danger)
    </p>
    <p>
      @Html.Button(EButton.Regular, "Take me to google", "http://www.google.com").AsButton(EBootstrapButton.Info, EBootstrapButton.XSmall)
      @Html.Button(EButton.Regular, "Take me to google", "http://www.google.com").AsButton(EBootstrapButton.Warning, EBootstrapButton.Small)
      @Html.Button(EButton.Regular, "Take me to google", "goToGoogle()").AsButton(EBootstrapButton.Success, EBootstrapButton.Large)
    </p>
  </div>
  <p>All available extensions</p>
  <pre><code>
.AsButton(type)
  </code></pre>
  @Html.Alert(EMessage.Warning, "Note that this extension can only be used for hyperlinks and button elements", string.Empty, EFontAwesomeIcon.Flag)
</div>

<div class="well">
  <h4>Date time pickers</h4>
  <p>
    WebExtras provides helper methods for rendering a date time picker attached to a textbox by using a great little date time picker
    provided by Sébastien Malot. You can get a copy of the date time picker from @Html.Hyperlink("here.", "http://www.malot.fr/bootstrap-datetimepicker")
  </p>
  <p>Markup</p>
  <pre><code>
@@Html.DateTextBoxFor(f => f.DateTextBox)
@@Html.TimeTextBoxFor(f => f.TimeTextBox, new { format = "hh:ii" })                     
@@Html.DateTimeTextBoxFor(f => f.DateTimeTextBox, new { format = "dd M yyyy hh:ii" })   
  </code></pre>
  @Html.Alert(EMessage.Warning, "Note that this date time picker uses 'i' for minutes", string.Empty, EFontAwesomeIcon.Flag)
  <p>Output</p>
  <div class="content">
    <div class="row keep-center">
      <div class="col-md-4">Date only picker</div>
      <div class="col-md-4">Time only picker</div>
      <div class="col-md-4">Date and time picker</div>
    </div>
    <div class="row keep-center">
      <div class="col-md-4">
        @Html.DateTimeTextBoxFor(f => f.DateTextBox, new PickerOptions { format = "YYYY-MM-DD" })
      </div>
      <div class="col-md-4">
        @Html.DateTimeTextBoxFor(f => f.TimeTextBox, new PickerOptions { format = "HH:mm:ss" })
      </div>
      <div class="col-md-4">
        @Html.DateTimeTextBoxFor(f => f.DateTimeTextBox)
      </div>
    </div>
  </div>
  <p>A slight gotcha with the time only picker is that the date will always be fixed to 31 December 1899. </p>
</div>

<div class="well">
  <h4>Manipulating lists</h4>
  <div class="row">
    <div class="col-md-6">
      <p>Unstyled lists can be created by using the <strong>AsUnstyled()</strong> decorator.</p>
      <p>Markup</p>
      <pre><code>
@@Html.List(EList.Unordered, new HtmlListItem[] { 
  new HtmlListItem("list item 1"),
  new HtmlListItem("list item 2"),
  new HtmlListItem("list item 3"),
  new HtmlListItem("list item 4"),
  new HtmlListItem("list item 5")
}).AsUnstyled()
  </code></pre>
      <p>Output</p>
      <div class="content">
        @Html.List(EList.Unordered, new HtmlListItem[] { 
      new HtmlListItem("list item 1"),
      new HtmlListItem("list item 2"),
      new HtmlListItem("list item 3"),
      new HtmlListItem("list item 4"),
      new HtmlListItem("list item 5")
    }).AsUnstyled()
      </div>
    </div>
    <div class="col-md-6">
      <p>Inline lists can be created by using the <strong>AsInline()</strong> decorator.</p>
      <p>Markup</p>
      <pre><code>
@@Html.List(EList.Unordered, new HtmlListItem[] { 
  new HtmlListItem("list item 1"),
  new HtmlListItem("list item 2"),
  new HtmlListItem("list item 3"),
  new HtmlListItem("list item 4"),
  new HtmlListItem("list item 5")
}).AsInline()
  </code></pre>
      <p>Output</p>
      <div class="content">
        @Html.List(EList.Unordered, new HtmlListItem[] { 
      new HtmlListItem("list item 1"),
      new HtmlListItem("list item 2"),
      new HtmlListItem("list item 3"),
      new HtmlListItem("list item 4"),
      new HtmlListItem("list item 5")
    }).AsInline()
      </div>
    </div>
  </div>
</div>
