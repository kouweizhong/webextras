#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Areas/Bootstrap/Views/Core/Generic.cshtml")]
    public partial class _Areas_Bootstrap_Views_Core_Generic_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {
        public _Areas_Bootstrap_Views_Core_Generic_cshtml()
        {
        }
        public override void Execute()
        {

            
            #line 1 "..\..\Areas\Bootstrap\Views\Core\Generic.cshtml"
  
  ViewBag.Title = "Generic .NET Extensions";


            
            #line default
            #line hidden
WriteLiteral(@"<h3 class=""keep-center"">Generic .NET Extensions and Helpers</h3>
<div class=""row-fluid"">
  <div class=""span6"">
    <div class=""row-fluid"">
      <div class=""span3"">
        <strong>Assembly</strong>
      </div>
      <div class=""span4"">
        WebExtras.dll
      </div>
    </div>
    <div class=""row-fluid"">
      <div class=""span3"">
        <strong>Namespace</strong>
      </div>
      <div class=""span4"">
        WebExtras.Core
      </div>
    </div>
  </div>
</div>

");



WriteLiteral(@"
<div class=""well"">
  <h4>Object Extensions</h4>
  <p>
    WebExtras provides a general purpose object cloner which performs a deep clone of the given object.
    However, in order for the cloning to work, all objects (including any child object of the class) to 
    be cloned must be marked as serializable using the [Serializable] decorator attribute.
  </p>
  <p>Markup</p>
  <pre><code>
  SomeClass object1 = new SomeClass();
  SomeClass object2 = object1.DeepClone();
  </code></pre>
</div>

");



WriteLiteral("\r\n<div class=\"well\">\r\n  <h4>Enum Extensions</h4>\r\n  <p>WebExtras provides two enu" +
"m extension methods viz., ToTitleCase() and GetStringValue()</p>\r\n  <div class=\"" +
"row-fluid\">\r\n    <div class=\"span6\">Consider the following C# enumeration</div>\r" +
"\n    <div class=\"span6\">\r\n      ToTitleCase() as the method name suggests will c" +
"onvert the enum \r\n      value to it\'s titlecase representation based on the curr" +
"ent system culture\r\n    </div>    \r\n  </div>\r\n  <div class=\"row-fluid\">\r\n    <di" +
"v class=\"span6\">\r\n      <pre><code>\r\n  <span class=\"comment\">// Enum definition<" +
"/span>\r\n  public enum TestEnum\r\n  {\r\n    [StringValue(\"My great Enum\")]\r\n    enu" +
"mvalue = 0,\r\n\r\n    [StringValue(typeof(MyCustomStringValueDecider))]\r\n    custom" +
"EnumValue = 1\r\n  }\r\n    </code></pre>\r\n    </div>\r\n    <div class=\"span6\">\r\n    " +
"  <pre><code>\r\n  <span class=\"comment\">// Invocation of ToTitleCase</span>\r\n  Te" +
"stEnum.enumvalue.ToTitleCase()\r\n\r\n  <span class=\"comment\">// Output</span>\r\n  En" +
"umvalue\r\n    </code></pre>\r\n    </div>    \r\n  </div>\r\n  <div class=\"row-fluid\">\r" +
"\n    <div class=\"span12\">\r\n      GetStringValue() simply retrieves the string va" +
"lue decorated either using a static\r\n      text or by using a <span class=\"highl" +
"ight\">IStringValueDecider</span> implementation of the StringValue attribute. \r\n" +
"      This is especially useful if you want an enum value to have an integer rep" +
"resentation \r\n      as well as a string representation.\r\n    </div>\r\n  </div>\r\n " +
" <div class=\"row-fluid\">\r\n    <div class=\"span6\">\r\n      <pre><code>\r\n  <span cl" +
"ass=\"comment\">// Invocation of GetStringValue</span>\r\n  TestEnum.enumvalue.GetSt" +
"ringValue()\r\n\r\n  <span class=\"comment\">// Output</span>\r\n  My great Enum\r\n    </" +
"code></pre>\r\n    </div>\r\n    <div class=\"span6\">\r\n      <pre><code>\r\n  <span cla" +
"ss=\"comment\">// This is how MyCustomStringValueDecider class looks</span>\r\n  cla" +
"ss MyCustomStringValueDecider : IStringValueDecider\r\n  {\r\n    public string Deci" +
"de()\r\n    {\r\n      <span class=\"comment\">// Let us say we evaluated some conditi" +
"on here<br />      // and our result was \"my decided value\"</span>\r\n      return" +
" \"my decided value\";\r\n    }\r\n  }\r\n\r\n  <span class=\"comment\">// Invocation of Get" +
"StringValue on a value that has a <br />  // custom string value decider</span>\r" +
"\n  TestEnum.customEnumValue.GetStringValue()\r\n\r\n  <span class=\"comment\">// Outpu" +
"t</span>\r\n  my decided value\r\n    </code></pre>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r" +
"\n\r\n");



WriteLiteral("\r\n<div class=\"well\">\r\n  <h4>String Extensions</h4>\r\n  <p>WebExtras provides two s" +
"tring extension methods viz., ToTitleCase() and ContainsIgnoreCase()</p>\r\n  <div" +
" class=\"row-fluid\">\r\n    <div class=\"span4\">\r\n      ToTitleCase() as the method " +
"name suggests will convert the string \r\n      value to it\'s titlecase representa" +
"tion based on the current system culture\r\n    </div>\r\n    <div class=\"span4\">\r\n " +
"     ContainsIgnoreCase() simply compares the current string with a given string" +
" and\r\n      checks whether the current string contains the given string irrespec" +
"tive of case\r\n    </div>\r\n    <div class=\"span4\">\r\n        Remove() method remov" +
"es all occurences of the given string from it\'s parent string. This extension \r\n" +
"        simply uses the Replace() method internally but making use of Remove() i" +
"s semantically clearer.\r\n      </div>\r\n  </div>\r\n  <div class=\"row-fluid\">    \r\n" +
"    <div class=\"span4\">\r\n      <pre><code>\r\n  <span class=\"comment\">// String de" +
"finition</span>\r\n  string str = \"basic\"\r\n\r\n  <span class=\"comment\">// Invocation" +
" of ToTitleCase</span>\r\n  str.ToTitleCase()\r\n\r\n  <span class=\"comment\">// Output" +
"</span>\r\n  Basic\r\n    </code></pre>\r\n    </div>\r\n    <div class=\"span4\">\r\n      " +
"<pre><code>\r\n  <span class=\"comment\">// String definition</span>\r\n  string str =" +
" \"basic\"\r\n\r\n  <span class=\"comment\">// Invocation of ContainsIgnoreCase</span>\r\n" +
"  str.ContainsIgnoreCase(\"BAS\")\r\n\r\n  <span class=\"comment\">// Output</span>\r\n  t" +
"rue\r\n    </code></pre>\r\n    </div>\r\n    <div class=\"span4\">\r\n        <pre><code>" +
"\r\n  <span class=\"comment\">// String definition</span> \r\n  string str = \"basicall" +
"y basic\"\r\n\r\n  <span class=\"comment\">// Invocation of Remove</span> \r\n  str.Remov" +
"e(\"bas\")\r\n            \r\n  <span class=\"comment\">// Output</span> \r\n  ically ic\r\n" +
"          </code></pre>\r\n      </div>\r\n  </div>\r\n</div>\r\n\r\n");



WriteLiteral(@"
<div class=""well"">
  <h4>Double Extensions</h4>
  <p>WebExtras provides ability to convert JavaScript ticks to a .NET DateTime object by using the ToDateTime()
    extension method available to all double values
  </p>
  <pre><code>
  double ticks = 1356998400000;
  DateTime dt = ticks.ToDateTime();       <span class=""comment"">// Parsed date time is 01/01/2013 12:00:00 AM</span>
  </code></pre>
</div>

");



WriteLiteral(@"
<div class=""well"">
  <h4>DateTime Extensions</h4>
  <p>As with doubles, WebExtras also provides ability to convert a .NET DateTime object to it's equivalent
    JavaScript timestamp by using the ToJavaScriptDate() extension method available to all DateTime values
  </p>
  <pre><code>
  DateTime dt = DateTime.Parse(""2013-01-01 00:00:00"");
  double ticks = dt.ToJavaScriptDate();       <span class=""comment"">// Parsed JavaScript ticks are 1356998400000</span>
  </code></pre>
</div>

");



WriteLiteral(@"
<div class=""well"">
  <h4>JsFunc utility class</h4>
  <p>In order to create and return custom JavaScript functions for the DataTables and Flot hooks, WebExtras provides
    the <strong>WebExtras.Core.JsFunc</strong> class.
  </p>
  <p>Markup</p>
  <pre><code>
JsFunc foo = new JsFunc
{
  Name = ""foo"",
  ParameterNames = new string[] { ""myParam1"", ""myParam2"" },
  Body = ""alert(myParam1 + '...' + myParam2);"",
  OnDocumentReady = true
};
  </code></pre>
  <p>And the serialised output will be</p>
  <pre><code>
<span class=""comment"">// You MUST use the Json.NET serialiser in order to serialise properly</span>
$(document).ready(function() {
  function foo(myParam1, myParam2) {
    alert(myParam1 + '...' + myParam2);
  };
});
  </code></pre>
</div>");


        }
    }
}
#pragma warning restore 1591
