#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using WebExtras.Core;
    using WebExtras.Mvc.Bootstrap;
    using WebExtras.Mvc.Bootstrap.v2;
    using WebExtras.Mvc.Core;
    using WebExtras.Mvc.Html;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Areas/Bootstrap/Views/Mvc/BootstrapHtml.cshtml")]
    public partial class _Areas_Bootstrap_Views_Mvc_BootstrapHtml_cshtml : System.Web.Mvc.WebViewPage<WebExtras.DemoApp.Models.Mvc.CoreHtmlViewModel>
    {
        public _Areas_Bootstrap_Views_Mvc_BootstrapHtml_cshtml()
        {
        }
        public override void Execute()
        {


            
            #line 2 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
  
  ViewBag.Title = "Mvc Bootstrap Html Helper Extensions";


            
            #line default
            #line hidden
WriteLiteral("\r\n");


            
            #line 6 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
 if (Model.ShowMessage)
{
  
            
            #line default
            #line hidden
            
            #line 8 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.GetLastActionMessage());

            
            #line default
            #line hidden
            
            #line 8 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
                              
}

            
            #line default
            #line hidden
WriteLiteral(@"
<h3 class=""keep-center"">Mvc Bootstrap Html Helper Extensions</h3>

<div class=""row-fluid"">
  <div class=""span6"">
    <div class=""row-fluid"">
      <div class=""span3"">
        <strong>Assembly</strong>
      </div>
      <div class=""span4"">
        WebExtras.Mvc.dll
      </div>
    </div>
    <div class=""row-fluid"">
      <div class=""span3"">
        <strong>Namespace</strong>
      </div>
      <div class=""span4"">
        WebExtras.Mvc.Bootstrap
      </div>
    </div>
  </div>
  <div class=""span6"">
    <div class=""span3"">
      <strong>Dependancies</strong>
    </div>
    <div class=""span6"">
      <ul class=""dependancies"">
        <li>Bootstrap 2.3.x</li>
        <li>Font Awesome 4.0 and above</li>
        <li>webextras.bootstrap.css</li>
      </ul>
    </div>
  </div>
</div>

");


            
            #line 46 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
  
  Alert[] alerts = Html.GetUserAlerts();
  if (alerts.Length > 0)
  {
  

            
            #line default
            #line hidden
WriteLiteral("  <div class=\"row-fluid\">\r\n    <div class=\"span12\">\r\n");


            
            #line 53 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
       foreach (Alert alert in alerts)
      {
        
            
            #line default
            #line hidden
            
            #line 55 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
   Write(alert);

            
            #line default
            #line hidden
            
            #line 55 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
              
      }

            
            #line default
            #line hidden
WriteLiteral("    </div>\r\n  </div>\r\n");


            
            #line 59 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
  
  }


            
            #line default
            #line hidden
WriteLiteral("\r\n<div class=\"well\">\r\n  <h4>Icon</h4>\r\n  <p>\r\n    Markup\r\n  </p>\r\n  <pre><code>\r\n" +
"");


WriteLiteral("@Html.Icon(EBootstrapIcon.Ok)\r\n");


WriteLiteral("@Html.Icon(EFontAwesomeIcon.Ok)\r\n");


WriteLiteral(@"@Html.Icon(EFontAwesomeIcon.Ok, EFontAwesomeIconSize.Large)
  </code></pre>
  <p>
    Output
  </p>
  <div class=""content"">
    <div class=""row-fluid"">
      <div class=""span4"">Default Bootstrap Icons</div>
      <div class=""span4"">Font Awesome Icons</div>
      <div class=""span4"">Sized Font Awesome Icons</div>
    </div>
    <div class=""row-fluid"">
      <div class=""span4"">
        ");


            
            #line 84 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
   Write(Html.Icon(EBootstrapIcon.Thumbs_Up));

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 84 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
                                        Write(Html.Icon(EBootstrapIcon.Arrow_Down));

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 84 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
                                                                              Write(Html.Icon(EBootstrapIcon.Backward));

            
            #line default
            #line hidden
WriteLiteral("\r\n        ");


            
            #line 85 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
   Write(Html.Icon(EBootstrapIcon.Ban_Circle));

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 85 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
                                         Write(Html.Icon(EBootstrapIcon.Tint));

            
            #line default
            #line hidden
WriteLiteral("\r\n      </div>\r\n      <div class=\"span4\">\r\n        ");


            
            #line 88 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
   Write(Html.Icon(EFontAwesomeIcon.Thumbs_Up));

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 88 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
                                          Write(Html.Icon(EFontAwesomeIcon.Arrow_Down));

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 88 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
                                                                                  Write(Html.Icon(EFontAwesomeIcon.Backward));

            
            #line default
            #line hidden
WriteLiteral("\r\n        ");


            
            #line 89 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
   Write(Html.Icon(EFontAwesomeIcon.Ban));

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 89 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
                                    Write(Html.Icon(EFontAwesomeIcon.Tint));

            
            #line default
            #line hidden
WriteLiteral("\r\n      </div>\r\n      <div class=\"span4\">\r\n        ");


            
            #line 92 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
   Write(Html.Icon(EFontAwesomeIcon.Thumbs_Up, EFontAwesomeIconSize.Normal));

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 92 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
                                                                       Write(Html.Icon(EFontAwesomeIcon.Arrow_Down, EFontAwesomeIconSize.Large));

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 92 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
                                                                                                                                           Write(Html.Icon(EFontAwesomeIcon.Backward, EFontAwesomeIconSize.TwoX));

            
            #line default
            #line hidden
WriteLiteral("\r\n        ");


            
            #line 93 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
   Write(Html.Icon(EFontAwesomeIcon.Ban, EFontAwesomeIconSize.ThreeX));

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 93 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
                                                                 Write(Html.Icon(EFontAwesomeIcon.Tint, EFontAwesomeIconSize.FourX));

            
            #line default
            #line hidden
WriteLiteral("\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"well\">\r\n  <h4>Adding " +
"icons to existing elements</h4>\r\n  <p>\r\n    Markup\r\n  </p>\r\n  <pre><code>\r\n");


WriteLiteral("@Html.Hyperlink(\"Take me to google\", \"http://www.google.com\").AddIcon(EBootstrapI" +
"con.Ok)\r\n  </code></pre>\r\n  <p>\r\n    Output\r\n  </p>\r\n  <div class=\"content\">\r\n  " +
"  ");


            
            #line 111 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.Hyperlink("Take me to google", "http://www.google.com").AddIcon(EBootstrapIcon.Ok));

            
            #line default
            #line hidden
WriteLiteral(@"
  </div>
  <p>
    All available extensions
  </p>
  <pre><code>
.AddIcon(bootstrap-icon)                
.AddIcon(fontawesome-icon)
.AddIcon(fontawesome-icon, fontawesome-icon-size)
.AddWhiteIcon(bootstrap-icon)
.AddWhiteIcon(fontawesome-icon) 
.AddWhiteIcon(fontawesome-icon, fontawesome-icon-size)
  </code></pre>
");


            
            #line 124 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.Alert(EMessage.Warning, "Note that the 'icon' can be a default Bootstrap icon or a Font Awesome icon", string.Empty, EFontAwesomeIcon.Flag));

            
            #line default
            #line hidden
WriteLiteral("\r\n</div>\r\n\r\n<div class=\"well\">\r\n  <h4>Hyperlinks styled as buttons</h4>\r\n  <p>\r\n " +
"   Markup\r\n  </p>\r\n  <pre><code>\r\n");


WriteLiteral("@Html.Hyperlink(\"Take me to google\", \"http://www.google.com\")\r\n  .AddWhiteIcon(EB" +
"ootstrapIcon.Ok)\r\n  .AsButton(EBootstrapButton.Info) \r\n  </code></pre>\r\n  <p>\r\n " +
"   Output\r\n  </p>\r\n  <div class=\"content\">\r\n    ");


            
            #line 141 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.Hyperlink("Take me to google", "http://www.google.com").AddWhiteIcon(EBootstrapIcon.Ok).AsButton(EBootstrapButton.Info));

            
            #line default
            #line hidden
WriteLiteral("\r\n  </div>\r\n  <p>\r\n    All available extensions\r\n  </p>\r\n  <pre><code>\r\n.AsButton" +
"(type) \r\n  </code></pre>\r\n  ");


            
            #line 149 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.Alert(EMessage.Warning, "Note that this extension can only be used for hyperlinks and button elements", string.Empty, EFontAwesomeIcon.Flag));

            
            #line default
            #line hidden
WriteLiteral("\r\n</div>\r\n\r\n<div class=\"well\">\r\n  <h4>Navbar</h4>\r\n  <p>Markup</p>\r\n  <pre><code>" +
"\r\n");


WriteLiteral(@"@{
  <span class=""comment"">// You can use Hyperlink elements or a HtmlList element to render a navbar</span>
  Hyperlink link1 = new Hyperlink(""Link 1"", ""#"");
  Hyperlink link2 = new Hyperlink(""Link 2"", ""#"");
  Hyperlink link3 = new Hyperlink(""Link 3"", ""#"");
  Hyperlink link4 = new Hyperlink(""Brand"", ""#"", new { ");


WriteLiteral("@class = \"brand\" });\r\n        \r\n  HtmlListItem item3 = new HtmlListItem(string.Em" +
"pty);\r\n  item3.Append(link3);        \r\n\r\n  HtmlList list = new HtmlList(EList.Un" +
"ordered, new HtmlListItem[] { item3 });    \r\n}      \r\n\r\n");


WriteLiteral("@Html.Navbar(EBootstrapNavbar.Normal, list)\r\n\r\n<span class=\"comment\">// Use appro" +
"priate navbar type to get all bootstrap effects</span>\r\n");


WriteLiteral(@"@Html.Navbar(EBootstrapNavbar.Normal, link1, link2, link3, link4)<span class=""highlight"">.AsInverse()</span>  <span class=""comment"">// Creates an inverse styled navbar</span>
  </code></pre>
  <p>
    Output
  </p>
  <div class=""content"">
    <div class=""container-fluid"">
");


            
            #line 179 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
        
        Hyperlink link1 = new Hyperlink("Link 1", "#");
        Hyperlink link2 = new Hyperlink("Link 2", "#");
        Hyperlink link3 = new Hyperlink("Link 3", "#");
        Hyperlink link4 = new Hyperlink("Brand", "#", new { @class = "brand" });

        HtmlListItem item3 = HtmlListItem.From(link3);

        HtmlList list = new HtmlList(EList.Unordered, new HtmlListItem[] { item3 });    
      

            
            #line default
            #line hidden
WriteLiteral("\r\n      ");


            
            #line 190 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
 Write(Html.Navbar(EBootstrapNavbar.Normal, list));

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n      ");


            
            #line 192 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
 Write(Html.Navbar(EBootstrapNavbar.Normal, link1, link2, link3, link4).AsInverse());

            
            #line default
            #line hidden
WriteLiteral("\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"well\">\r\n  <h4>Progress Bars</h4>\r\n " +
" <p>Markup</p>\r\n  <pre><code>\r\n");


WriteLiteral("@Html.ProgressBar(EBootstrapProgressBar.Default, 10)\r\n");


WriteLiteral("@Html.ProgressBar(EBootstrapProgressBar.Success, 25)\r\n");


WriteLiteral("@Html.ProgressBar(EBootstrapProgressBar.Warning, 50)<span class=\"highlight\">.AsSt" +
"riped()</span>\r\n");


WriteLiteral("@Html.ProgressBar(EBootstrapProgressBar.Danger, 75)<span class=\"highlight\">.AsAni" +
"mated()</span>\r\n  </code></pre>\r\n  <p>Output</p>\r\n  <div class=\"content\">\r\n    ");


            
            #line 208 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.ProgressBar(EBootstrapProgressBar.Default, 10));

            
            #line default
            #line hidden
WriteLiteral("\r\n    ");


            
            #line 209 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.ProgressBar(EBootstrapProgressBar.Success, 25));

            
            #line default
            #line hidden
WriteLiteral("\r\n    ");


            
            #line 210 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.ProgressBar(EBootstrapProgressBar.Warning, 50).AsStriped());

            
            #line default
            #line hidden
WriteLiteral("\r\n    ");


            
            #line 211 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.ProgressBar(EBootstrapProgressBar.Danger, 75).AsAnimated());

            
            #line default
            #line hidden
WriteLiteral("\r\n  </div>\r\n  <p>Striped and Animated progress bar CSS effects are not supported " +
"in Internet Explorer 9 and below and on Opera 12</p>\r\n</div>\r\n\r\n<div class=\"well" +
"\">\r\n  <h4>Tooltips</h4>\r\n  <p>Markup</p>\r\n  <pre><code>\r\n");


WriteLiteral("@Html.TooltipFor(f => f.SomeProperty, \"This is a tooltip\")\r\n");


WriteLiteral("@Html.TooltipFor(f => f.SomeProperty2)\r\n  </code></pre>\r\n  <p>Output</p>\r\n  <div " +
"class=\"content\">\r\n    <div class=\"row-fluid\">\r\n      <div class=\"span3\">First ca" +
"ll result ");


            
            #line 226 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
                                      Write(Html.Icon(EFontAwesomeIcon.Angle_Right));

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 226 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
                                                                               Write(Html.TooltipFor(f => f.SomeProperty, "This is a tooltip"));

            
            #line default
            #line hidden
WriteLiteral("</div>\r\n      <div class=\"span3\">Second call result ");


            
            #line 227 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
                                       Write(Html.Icon(EFontAwesomeIcon.Angle_Right));

            
            #line default
            #line hidden
WriteLiteral(" ");


            
            #line 227 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
                                                                                Write(Html.TooltipFor(f => f.SomeProperty2));

            
            #line default
            #line hidden
WriteLiteral("</div>\r\n    </div>\r\n  </div>\r\n  <p>All available extensions</p>\r\n  <pre><code>\r\n<" +
"span class=\"comment\">// Tooltip text retrieved from the <span class=\"highlight\">" +
"System.ComponentModel.DescriptionAttribute</span> added to the view model proper" +
"ty</span>\r\n");


WriteLiteral("@Html.TooltipFor(propertySelector)\r\n");


WriteLiteral("@Html.TooltipFor(propertySelector, placement, trigger)\r\n\r\n<span class=\"comment\">/" +
"/ Tooltip text retrieved from the function parameter passed in</span>\r\n");


WriteLiteral("@Html.TooltipFor(propertySelector, tooltipText)\r\n");


WriteLiteral("@Html.TooltipFor(propertySelector, tooltipText, placement, trigger)\r\n  </code></p" +
"re>\r\n</div>\r\n\r\n<div class=\"well\">\r\n  <h4>Alerts</h4>\r\n  <p>You can create alert " +
"messages using WebExtras extension method</p>\r\n  <p>Usage</p>\r\n  <pre><code>\r\n  " +
"");


WriteLiteral("@Html.Alert(EMessage.Success, \"Hooray...I am a resounding success\")\r\n  ");


WriteLiteral("@Html.Alert(EMessage.Warning, \"Oops...something went wrong. But no worries, I can" +
" still continue\", \"Note:\")\r\n  ");


WriteLiteral("@Html.Alert(EMessage.Error, \"No dice...something is seriously wrong. I quit\", \"Er" +
"ror:\", EBootstrapIcon.Exclamation_Sign)\r\n  ");


WriteLiteral("@Html.Alert(EMessage.Information, \"Just so you know, I am gonna try it again\", \"N" +
"ote:\", EFontAwesomeIcon.Flag)\r\n  </code></pre>\r\n  <p>Output</p>\r\n  <div class=\"c" +
"ontent\">\r\n    ");


            
            #line 254 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.Alert(EMessage.Success, "Hooray...I am a resounding success"));

            
            #line default
            #line hidden
WriteLiteral("\r\n    ");


            
            #line 255 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.Alert(EMessage.Warning, "Oops...something went wrong. But no worries, I can still continue", "Note:"));

            
            #line default
            #line hidden
WriteLiteral("\r\n    ");


            
            #line 256 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.Alert(EMessage.Error, "No dice...something is seriously wrong. I quit", "Error:", EBootstrapIcon.Exclamation_Sign));

            
            #line default
            #line hidden
WriteLiteral("\r\n    ");


            
            #line 257 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.Alert(EMessage.Information, "Just so you know, I am gonna try it again", "Note:", EFontAwesomeIcon.Flag));

            
            #line default
            #line hidden
WriteLiteral(@"
  </div>
</div>

<div class=""well"">
  <h4>Action messages</h4>
  <p>
    WebExtras provides a way to add action messages to denote status of action to notify a user. For e.g. you may want to add a message to the user when he is moved to a different
    page on a form submit or on a particular action
  </p>
  <p>Usage</p>
  <pre><code>
<span class=""comment"">// In the controller</span>
using WebExtras.MVC.Bootstrap.Core

public class HomeController : ControllerBase
{
  public ActionResult SomeAction()
  {
    SomeModel model = new SomeModel();
    return <span class=""highlight"">this.</span>View(""myview"", model, ""Your action was successful"");
  }

  public ActionResult SomeOtherAction()
  {
    SomeModel model = new SomeModel();
    return <span class=""highlight"">this.</span>RedirectToAction(myActionResult, ""Your action failed"", EActionMessage.Error);
  }
}

<span class=""comment"">// In the view</span>
");


WriteLiteral(@"@Html.GetLastActionMessage()
  </code></pre>
  <p>Output</p>
  <div class=""content"">
    <span class=""comment"">// Click the link below to see an action message demo.
      <br />
    </span>
    <span class=""comment"">// Action messages by default appear on the top right corner of the screen.
      <br />
    </span>
    <span class=""comment"">// It's position can be controlled via CSS though. See the accompanying webextras.css file.
      <br />
    </span>
    <br />
    ");


            
            #line 302 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.Hyperlink("Action Successful Message Demo", MVC.Bootstrap.Mvc.ActionMessageDemo(true)));

            
            #line default
            #line hidden
WriteLiteral("\r\n    &nbsp;&nbsp;&nbsp;&nbsp;\r\n    ");


            
            #line 304 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.Hyperlink("Action Error Message Demo", MVC.Bootstrap.Mvc.ActionMessageDemo(false)));

            
            #line default
            #line hidden
WriteLiteral(@"
  </div>
</div>

<div class=""well"">
  <h4>User Alerts</h4>
  <p>
    While there can only be one action message per controller action, WebExtras also allows you to add multiple
    user alerts which can then be retrieved and displayed from the view.
  </p>
  <p>Usage</p>
  <pre><code>
  <span class=""comment"">// in your controller</span>
  public ActionResult SomeAction()
  {
    ....
    Alert alert = new Alert(...);
    ....
    this.SaveUserAlert(alert);
    ....
    return View()
  }
    
  <span class=""comment"">// and then in your view</span>
  ");


WriteLiteral("@{\r\n    Alert[] alerts = Html.GetUserAlerts();\r\n  \r\n    foreach(Alert alert in al" +
"erts)\r\n    {\r\n      ");


WriteLiteral(@"@alert
    }
  }
  </code></pre>
  <p>Output</p>
  <div class=""content"">
    <span class=""comment"">// Click the link below to see an user alerts demo.
      <br />
    </span>
    <span class=""comment"">// User alerts will be shown at the top of the page.
      <br />
    </span>
    <br />
    ");


            
            #line 346 "..\..\Areas\Bootstrap\Views\Mvc\BootstrapHtml.cshtml"
Write(Html.Hyperlink("User Alerts Demo", MVC.Bootstrap.Mvc.UserAlertsDemo()));

            
            #line default
            #line hidden
WriteLiteral("\r\n  </div>\r\n</div>\r\n\r\n");


        }
    }
}
#pragma warning restore 1591
