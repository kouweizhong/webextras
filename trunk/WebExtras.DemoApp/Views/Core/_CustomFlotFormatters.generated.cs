#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    
    #line 3 "..\..\Views\Core\_CustomFlotFormatters.cshtml"
    using WebExtras.Mvc.Core;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Core/_CustomFlotFormatters.cshtml")]
    public partial class _Views_Core__CustomFlotFormatters_cshtml : System.Web.Mvc.WebViewPage<WebExtras.JQFlot.FlotChart>
    {
        public _Views_Core__CustomFlotFormatters_cshtml()
        {
        }
        public override void Execute()
        {

WriteLiteral("\r\n");


WriteLiteral(@"
<div class=""well ui-well"">
  <h4>Setting up a custom formatter</h4>
  <p>
    In order to allow you to create custom data formatters i.e any function definitions available in the Flot
  library, WebExtras provides the <strong>WebExtras.Core.JsFunc</strong> class.
  </p>
  <p>Let's setup a custom tick formatter as shown in the Flot API ");


            
            #line 11 "..\..\Views\Core\_CustomFlotFormatters.cshtml"
                                                             Write(Html.Hyperlink("here", "https://github.com/flot/flot/blob/master/API.md"));

            
            #line default
            #line hidden
WriteLiteral(@" for our X axis.</p>
  <p>Markup</p>
  <pre><code>
  <span class=""comment"">// Lets setup the X axis's tick formatter</span>
  FlotOptions options = new FlotOptions
  {
    xaxis = new AxisOptions
    {
      tickDecimals = 2,
      tickFormatter = new JsFunc
      {
        ParameterNames = new string[] { ""val"", ""axis"" },
        Body = ""return val.toFixed(axis.tickDecimals);""
      }
    }
  };
  </code></pre>
  <p>All the remaining process remains the same i.e creating the series and any other options you want.</p>
  <p>Output</p>
  <pre><code>
  <span class=""comment"">// This is how our Flot options will get serialized down</span>
  options = {
    ""xaxis"": {
      ""tickFormatter"": function (val, axis) { return val.toFixed(axis.tickDecimals); },
      ""tickDecimals"": 2
    }
  };    
  </code></pre>
</div>

<div class=""well ui-well"">
  <h4>And the actual graph</h4>
  <div class=""content"">
    <div id=""custom-graph"" class=""graph"">
    </div>
    <script type=""text/javascript"">
      $(document).ready(function () {
        $.plot($('#custom-graph'), [");


            
            #line 48 "..\..\Views\Core\_CustomFlotFormatters.cshtml"
                               Write(Html.Raw(Model.chartSeries[0].ToString()));

            
            #line default
            #line hidden
WriteLiteral("], ");


            
            #line 48 "..\..\Views\Core\_CustomFlotFormatters.cshtml"
                                                                            Write(Html.Raw(Model.chartOptions.ToString()));

            
            #line default
            #line hidden
WriteLiteral(");    \r\n      });\r\n    </script>\r\n  </div>\r\n</div>\r\n");


        }
    }
}
#pragma warning restore 1591
