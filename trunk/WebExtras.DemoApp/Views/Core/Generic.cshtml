@{
  ViewBag.Title = "Generic .NET Extensions";
}
<h3 class="keep-center">Generic .NET Extensions and Helpers</h3>
<div class="row-fluid">
  <div class="span6">
    <div class="row-fluid">
      <div class="span3">
        <strong>Assembly</strong>
      </div>
      <div class="span4">
        WebExtras.dll
      </div>
    </div>
    <div class="row-fluid">
      <div class="span3">
        <strong>Namespace</strong>
      </div>
      <div class="span4">
        WebExtras.Core
      </div>
    </div>
  </div>
</div>

<div class="well">
  <h4>Enum Extensions</h4>
  <p>WebExtras provides two enum extension methods viz., ToTitleCase() and GetStringValue()</p>
  <div class="row-fluid">
    <div class="span4">Consider the following C# enumeration</div>
    <div class="span4">
      ToTitleCase() as the method name suggests will convert the enum 
      value to it's titlecase representation based on the current system culture
    </div>
    <div class="span4">
      GetStringValue() simply retrieves the string value decorated using the 
      StringValue attribute. This is especially useful if you want an enum value to have an
      integer representation as well as a string representation
    </div>
  </div>
  <div class="row-fluid">
    <div class="span4">
      <pre><code>
  <span class="comment">// Enum definition</span>
  public enum TestEnum
  {
    [StringValue("My great Enum")]
    enumvalue = 0
  }
    </code></pre>
    </div>
    <div class="span4">
      <pre><code>
  <span class="comment">// Invocation of ToTitleCase</span>
  TestEnum.enumvalue.ToTitleCase()

  <span class="comment">// Output</span>
  Enumvalue
    </code></pre>
    </div>
    <div class="span4">
      <pre><code>
  <span class="comment">// Invocation of GetStringValue</span>
  TestEnum.enumvalue.GetStringValue()

  <span class="comment">// Output</span>
  My great Enum
    </code></pre>
    </div>
  </div>
</div>

<div class="well">
  <h4>String Extensions</h4>
  <p>WebExtras provides two string extension methods viz., ToTitleCase() and ContainsIgnoreCase()</p>
  <div class="row-fluid">
    <div class="span4">Consider the following C# string declaration</div>
    <div class="span4">
      ToTitleCase() as the method name suggests will convert the string 
      value to it's titlecase representation based on the current system culture
    </div>
    <div class="span4">
      ContainsIgnoreCase() simply compares the current string with a given string and
      checks whether the current string contains the given string irrespective of case
    </div>
  </div>
  <div class="row-fluid">
    <div class="span4">
      <pre><code>
  <span class="comment">// String definition</span>
  string str = "basic"
    </code></pre>
    </div>
    <div class="span4">
      <pre><code>
  <span class="comment">// Invocation of ToTitleCase</span>
  str.ToTitleCase()

  <span class="comment">// Output</span>
  Basic
    </code></pre>
    </div>
    <div class="span4">
      <pre><code>
  <span class="comment">// Invocation of ContainsIgnoreCase</span>
  str.ContainsIgnoreCase("BAS")

  <span class="comment">// Output</span>
  true
    </code></pre>
    </div>
  </div>
</div>

<div class="well">
  <h4>General Purpose Object Cloner</h4>
  <p>WebExtras provides a general purpose object cloner which performs a deep clone of the given object.
    However, in order for the cloning to work, all objects to be cloned must be marked as serializable.
  </p>
  <p>Markup</p>
  <pre><code>
  SomeClass object1 = new SomeClass();
  SomeClass object2 = ObjectCloner.Clone(object1);
  </code></pre>
</div>