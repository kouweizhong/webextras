#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using WebExtras.Core;
    using WebExtras.Mvc.Core;
    using WebExtras.Mvc.Html;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Core/_SortedSetup.cshtml")]
    public partial class _Views_Core__SortedSetup_cshtml : System.Web.Mvc.WebViewPage<WebExtras.JQDataTables.Datatable>
    {
        public _Views_Core__SortedSetup_cshtml()
        {
        }
        public override void Execute()
        {

WriteLiteral("\r\n<p>\r\n  Sorting support can be added by slightly modifying the column definition" +
"s and using the <strong>Sort</strong> extension method.\r\n</p>\r\n<div class=\"well " +
"ui-well\">\r\n  <h4>Updating the column definitions to enable sorting</h4>\r\n  Colum" +
"n definitions are created by instantiating the <i>WebExtras.JQDataTables.AOColum" +
"n</i> class. In order to enable sorting\r\n  on a column, you MUST set the Sortabl" +
"e property to <strong>true</strong>. By default this will be set to <strong>fals" +
"e</strong> by\r\n  the constructor.\r\n  <pre><code>\r\n  AOColumn dtColumn = new AOCo" +
"lumn\r\n  {\r\n    sTitle = \"First Column\",    <span class=\"comment\">// Only the sTi" +
"tle property is compulsory. All other properties are optional</span>\r\n    <span " +
"class=\"highlight\">bSortable = true,</span>\r\n    sClass = \"\",                <spa" +
"n class=\"comment\">// any extra CSS class you would like to apply to this column<" +
"/span>\r\n    sWidth = \"10%\",             <span class=\"comment\">// specified as a " +
"CSS width</span>\r\n    bVisible = true\r\n  };  \r\n  </code></pre>\r\n</div>\r\n\r\n<div c" +
"lass=\"well ui-well\">\r\n  <h4>Creating table settings</h4>\r\n  Table settings are c" +
"reated by instantiating the <i>WebExtras.JQDataTables.DatatableSettings</i> clas" +
"s \r\n  <pre><code>  \r\n  <span class=\"comment\">// We need a collection of columns " +
"to be specified in the settings, so create an array from our column</span>\r\n  AO" +
"Column[] dtColumns = new AOColumn[] { dtColumn };\r\n\r\n  DatatableSettings dtSetti" +
"ngs = new DatatableSettings \r\n  (\r\n    5,                                      <" +
"span class=\"comment\">// specify the number of records per page</span>\r\n    dtCol" +
"umns,\r\n    new AASort(0, ESort.Ascending),         <span class=\"comment\">// spec" +
"ify one initial sort, multiple initial sorts, or leave null for no sort</span>\r\n" +
"    <span class=\"highlight\">\"~/getsorteddata\"</span>,                     <span " +
"class=\"comment\">// specify an AJAX source to retrieve data from</span>\r\n    \"pag" +
"ed and sorted records\",             <span class=\"comment\">// specify a table foo" +
"ter suffix</span>\r\n    \"150px\"                                 <span class=\"comm" +
"ent\">// specify a maximum table height, once reached you will get scroll bars</s" +
"pan>\r\n  );\r\n  </code></pre>\r\n</div>\r\n\r\n<div class=\"well ui-well\">\r\n  <h4>Creatin" +
"g a data handler</h4>\r\n  We make use of the C# LinqToSQL feature in order to sim" +
"ulate the sorting behavior. WebExtras provides an extension method for the \r\n  <" +
"strong>IEnumerable&lt;IEnumerable&lt;string&gt;&gt;</strong> interface which tak" +
"es care of the sorting for us. \r\n  <pre><code>  \r\n  public DatatableRecords GetS" +
"ortedRecords(DatatableFilters filters)\r\n  {\r\n    <span class=\"comment\">// Let\'s " +
"create the actual data to go into the table by adding 15 records</span>\r\n    Lis" +
"t&lt;string[]&gt; dtData = new List&lt;string[]&gt;();   <span class=\"comment\">/" +
"/ Note that this still implements IEnumerable&lt;IEnumerable&lt;string&gt;&gt;</" +
"span>\r\n\r\n    <span class=\"comment\">// You can retrieve data from your repository" +
" here</span>\r\n    for (int i = 0; i < 15; i++)\r\n    {\r\n      dtData.Add(new stri" +
"ng[] { \r\n        string.Format(\"first column paged row {0}\", i + 1), \r\n        s" +
"tring.Format(\"second column paged row {0}\", i + 1) \r\n      });\r\n    }\r\n\r\n    Dat" +
"atableRecords dtRecords = new DatatableRecords\r\n    {\r\n      sEcho = filters.sEc" +
"ho,\r\n      iTotalRecords = dtData.Length,                                       " +
" <span class=\"comment\">// Total records in table</span>\r\n      iTotalDisplayReco" +
"rds = dtData.Length,                                 <span class=\"comment\">// To" +
"tal records to be displayed in the table</span>\r\n      aaData = dtData<span clas" +
"s=\"highlight\">.Sort(filters.iSortCol_0, filters.SortDirection)</span>        <sp" +
"an class=\"comment\">// The sorted data to be displayed</span>\r\n    };\r\n\r\n    retu" +
"rn dtRecords;\r\n  }\r\n  </code></pre>\r\n</div>\r\n\r\n<div class=\"well ui-well\">\r\n  <h4" +
">Make the first page of the table</h4>\r\n  We need to create the first page of th" +
"e table in order to have the paging behavior kick in. This should be done when y" +
"ou display\r\n  the table the first time.\r\n  <pre><code>  \r\n  DatatableRecords dtR" +
"ecords = GetSortedRecords(new DatatableFilters { iDisplayStart = 0, iDisplayLeng" +
"th = 5 });\r\n  Datatable dTable = new Datatable(\"sorted-table\", dtSettings, dtRec" +
"ords);\r\n  </code></pre>\r\n</div>\r\n\r\n<div class=\"well ui-well\">\r\n  <h4>A slightly " +
"modified AJAX callback handler</h4>\r\n  We will now make use of the method that w" +
"e have already created before to do our grunt work and get the data. The fact th" +
"at\r\n  we have used DatatableFilters as one of the parameters means that we can s" +
"imply forward the filtering parameters we got \r\n  from the HTTP GET request from" +
" the client side.\r\n  <pre><code>\r\n  public JsonResult GetSortedData(DatatableFil" +
"ters filters)\r\n  {\r\n    DatatableRecords dtRecords = GetSortedRecords(filters);\r" +
"\n\r\n    return Json(dtRecords, JsonRequestBehavior.AllowGet);\r\n  }\r\n  </code></pr" +
"e>\r\n</div>\r\n\r\n<div class=\"well ui-well\">\r\n  <h4>And our sorting enabled output i" +
"s</h4>\r\n  <div class=\"output\">\r\n    ");


            
            #line 102 "..\..\Views\Core\_SortedSetup.cshtml"
Write(Html.Partial(MVC.Shared.Views.DatatablePartial, Model));

            
            #line default
            #line hidden
WriteLiteral("\r\n  </div>\r\n</div>\r\n\r\n<div class=\"well ui-well\">\r\n  <h4>Some details about the so" +
"rter extension</h4>\r\n  <div class=\"content\">\r\n    <p>The sorter extension can cu" +
"rrently handle columns with the following .NET base types and some special forma" +
"ts as listed below:</p>\r\n    <ul>\r\n      <li>string</li>\r\n      <li>DateTime</li" +
">\r\n      <li>int, float, double, decimal</li>\r\n      <li>currency i.e. data in t" +
"he format: &euro;5.00, $6.00, &pound;7.00, &yen;8.00, &#8377;9.00. The sorter wi" +
"ll strip the currencies and sort on the decimal number.\r\n      It isn\'t intellig" +
"ent enough to look up the current exchange rate and sort them, so beware!!\r\n    " +
"  <br />\r\n        <strong>Rupees, Euro, Dollar, Pound and Yen</strong> are the c" +
"urrently supported\r\n      currencies.\r\n      </li>\r\n      <li>HTML fields i.e da" +
"ta in format: &lt;a href=\'/somelink.html\'&gt;some text&lt;/a&gt;. The sorter wil" +
"l strip the HTML tags and sort on the inner text of the tag.\r\n      In this case" +
" the sorter will sort on <strong>some text</strong> and not the HTML A tag.</li>" +
"\r\n    </ul>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"well ui-well\">\r\n  <h4>But my data d" +
"oesn\'t fit any of the default formats :(</h4>\r\n  <p>\r\n    All defaults sorters h" +
"ave a fixed way in which they try to parse data and then apply the sorting logic" +
" on it. \r\n    However, you are not limited to only the default sorters.\r\n    If " +
"you have a custom data format you are using, you can provide custom parsers to u" +
"se in order to perform sorts.\r\n  </p>\r\n  <pre><code>\r\n  <span class=\"comment\">//" +
" An example custom parser to sort on the second character of the column data</sp" +
"an>\r\n  Func&lt;string, object&gt; secondCharParser = (string str) => \r\n  {\r\n    " +
"char[] arr = str.ToCharArray();\r\n    \r\n    if(arr.Length > 1)\r\n      return arr[" +
"1];\r\n    \r\n    return null; \r\n  }\r\n\r\n  <span class=\"comment\">// Let\'s say we wan" +
"t to apply this custom parser to the second column of the table above</span>\r\n  " +
"Dictionary&lt;int, Func&lt;string, object&gt;&gt; parsers = new Dictionary&lt;in" +
"t, Func&lt;string, object&gt;&gt;();\r\n  parsers.Add(<span class=\"highlight\">1</s" +
"pan>, secondCharParser);           <span class=\"comment\">// Note that the dictio" +
"nary <span class=\"highlight\">key</span> must match the column index in the table" +
"</span>\r\n      \r\n  <span class=\"comment\">// This is how your DatatableRecords ob" +
"ject creation would look</span>\r\n  DatatableRecords dtRecords = new DatatableRec" +
"ords\r\n  {\r\n    sEcho = filters.sEcho,\r\n    iTotalRecords = dtData.Length,       " +
"                                 \r\n    iTotalDisplayRecords = dtData.Length,    " +
"                             \r\n    aaData = dtData<span class=\"highlight\">.Sort(" +
"filters.iSortCol_0, filters.SortDirection, parsers)</span>        <span class=\"c" +
"omment\">// Sorting with custom parser</span>\r\n  };\r\n  </code></pre>\r\n</div>\r\n");


        }
    }
}
#pragma warning restore 1591
